apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  namespace: kafka
spec:
  kafka:
    version: 3.6.1
    replicas: 2 #Quantidade de Brokers
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: loadbalancer
        tls: false
        configuration:
          bootstrap:
            annotations:
              # service.beta.kubernetes.io/oci-load-balancer-shape: "100Mbps"
              oci.oraclecloud.com/load-balancer-type: "lb"
          brokers: []
    config:
      offsets.topic.replication.factor: 2
      transaction.state.log.replication.factor: 2
      transaction.state.log.min.isr: 2
      log.retention.hours: 168 
      default.replication.factor: 1
      min.insync.replicas: 1
      # message.max.bytes: 2097152 # 2 MB
      inter.broker.protocol.version: "3.6"
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 50Gi
        deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    # template:
    #   pod:
    #     affinity:
    #       nodeAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           nodeSelectorTerms:
    #           - matchExpressions:
    #             - key: nodepool
    #               operator: In
    #               values:
    #               - kafka
  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 50Gi
      deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
    # template:
    #   pod:
    #     affinity:
    #       nodeAffinity:
    #         requiredDuringSchedulingIgnoredDuringExecution:
    #           nodeSelectorTerms:
    #           - matchExpressions:
    #             - key: nodepool
    #               operator: In
    #               values:
    #               - kafka
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
